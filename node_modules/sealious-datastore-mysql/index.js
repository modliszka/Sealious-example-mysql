var Promise = require("bluebird");
var Sealious = require("sealious");
var Mysql = require("mysql");
var data = require("./auth.js");
//var DbsCommonPart = require('sealious-datastore-dbs-common-part');

var DatastoreMysql  = new Sealious.ChipTypes.Datastore("mysql");

Sealious.ConfigManager.set_default_config(
	"datastore_chip_name", 
	data
);

DatastoreMysql.start = function(){
	var config = Sealious.ConfigManager.get_config("datastore_chip_name");

	var mysql_client = Mysql.createConnection(config);
	mysql_client.connect();
	var resource_types = Sealious.ChipManager.get_chips_by_type("resource_type");
	//console.log(resource_types.places.fields.name.type_name);

	return Promise.resolve()
		.then(function(){
			return new Promise(function(resolve, reject){
				var db_name = "my_db";
				var sql_query = 'CREATE DATABASE IF NOT EXISTS ??';
				mysql_client.query(sql_query, [db_name], function(err, rows, fields) {
					if (err) {
						reject(err);
						return;
					}
					console.log("Jestem po stworzeniu bazy danych: ", db_name);
					resolve(db_name);
				})
			})
		})
		.then(function(db_name){
			return new Promise(function(resolve, reject){
				mysql_client.query('USE ??',[db_name], function(err, rows) {
					if (err) {
						reject(err);
						return;
					}
					console.log("Jestem po uzyciu bazy danych: ", db_name);
					resolve();			
				});
			})
		})
		.then(function(){
			return new Promise(function(resolve, reject){
				for (var i in resource_types) {
					var rt = resource_types[i];
					console.log("mamy typ ", rt.name);
					var table_name = rt.name;
					var query = "("
					for (var irt in rt.fields) {
						//console.log(rt.fields[irt].name," ", rt.fields[irt].type_name );
						query += rt.fields[irt].name + " ";
						if (rt.fields[irt].type_name == "int") 
							query += "INT,"
						else if(rt.fields[irt].type_name == "float") 
							query += "FLOAT,"
						else 
							query += "VARCHAR(255),"
					}
					query = query.substring(0, query.length-1) + ")";
					//console.log(query);
					new Promise((function(table_name, query){
						return function(resolve, reject){
							mysql_client.query('CREATE TABLE IF NOT EXISTS ' +table_name +" "+query+';', function(err, rows, fields){
								if (err) {
									reject(err);
									return;
								}
								console.log("Jestem po dodaniu tabeli ",table_name);
								resolve();
							});
						};
					})(table_name, query));

				}
				console.log("Jestem po pętli for");
				resolve();
			})
		})
		.then(function(){
			return new Promise(function(resolve, reject){

				mysql_client.query("Select column_name, column_type, table_name from information_schema.columns where table_schema = 'my_db'", function(err, rows, fields) {
					if (err) {
						reject(err);
						return;
					}
			
					var col3 = rows.map(function(value){ return value.table_name; });

					for (var i in resource_types) {
						var rt = resource_types[i];

						if(col3.indexOf(rt.name)!= -1)		// chyba nie jest potrzebne
						{
					 		console.log("Tabela istnieje: ",rt.name);

					 		var col1 = rows
					 			.filter(function(value){ return value.table_name == rt.name})
					 			.map(function(value){ return value.column_name; });
					 		
					 		for (var irt in rt.fields) {
					 			var rtf = rt.fields[irt];

					 			if (col1.indexOf(rtf.name) == -1){
					 				var query = "ALTER TABLE "+rt.name+" ADD "+ rtf.name+" ";
					 				if (rt.fields[irt].type_name == "int") 
										query += "INT"
									else if(rt.fields[irt].type_name == "float") 
										query += "FLOAT"
									else 
										query += "VARCHAR(255)"

									query +=";";

					 				console.log("kolumna ", rtf.name," nie istnieje, bedzie add columnn");
					 				console.log(query);
					 				resolve(query);
					 			}
					 			else{
					 				//console.log('kolumna istnieje: ', rtf.name);

					 				var col2 = rows
							 			.filter(function(value){ return (value.table_name == rt.name &&  value.column_name == rtf.name)})
							 			.map(function(value){ return value.column_type; })[0];
							 		//console.log(col2);

							 		if(col2 == "int(11)" && rtf.type_name == 'int') console.log("Typ zgodny: ",rtf.name, " ", rtf.type_name);
							 		else if(col2 == "float" && rtf.type_name == 'float') console.log("Typ zgodny: ",rtf.name, " ", rtf.type_name);
							 		else  if(col2 == "varchar(255)" && rtf.type_name == 'text') console.log("Typ zgodny: ",rtf.name, " ", rtf.type_name);
							 		else{
							 			var query = "ALTER TABLE "+rt.name+" MODIFY COLUMN "+ rtf.name+" ";
							 			if (rt.fields[irt].type_name == "int") 
											query += "INT"
										else if(rt.fields[irt].type_name == "float") 
											query += "FLOAT"
										else 
											query += "VARCHAR(255)"
										query +=";";
								 		console.log(rtf.type_name, " tu bedzie alter");
								 		console.log(query);
					 					resolve(query);

							 		} 

					 			}
					 		}
						}
					}




					resolve();
										

					/*[ { Field: 'name',
						Type: 'varchar(255)',
						Null: 'YES',
						Key: '',
						Default: null,
						Extra: '' },
					*/
				})
			})
			.then(function(){
				return mysql_client.query("SELECT TABLE_NAME from information_schema.TABLES WHERE TABLE_SCHEMA = 'my_db' AND TABLE_NAME = 'places';" , function(err, rows, fields){
					if (err) {
						reject(err);
						return;
					}
					//console.log("R: ", rows[0]);
				});
			})
		});

	/*	TO-DO
		sprawdzić czy istnieje tabela
			jesli tak, to sprawdź czy jest kolumna (show fields from places)
				jesli tak, to sprawdź jej typ
					jesli jest inny, to: (alter table_name modify column_name)
					 (tu musi być catch)
				jesli nie, to ją dodaj
			jesli nie, to utwórz: CREATE TABLE IF NOT EXISTS 
	*/


	//mysql_client.end();
}


//DatastoreMysql = DbsCommonPart(DatastoreMysql,private);		

module.exports = DatastoreMysql;