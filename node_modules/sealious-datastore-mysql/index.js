var Promise = require("bluebird");
var Sealious = require("sealious");
var Mysql = require("mysql");
var data = require("./auth.js");
//var DbsCommonPart = require('sealious-datastore-dbs-common-part');

var mysql_client = null;

var DatastoreMysql  = new Sealious.ChipTypes.Datastore("mysql");

Sealious.ConfigManager.set_default_config(
	"datastore_chip_name", 
	data
	);


DatastoreMysql.start = function(){
	var config = Sealious.ConfigManager.get_config("datastore_chip_name");

	mysql_client = Mysql.createConnection(config);
	mysql_client.connect();
	//console.log(resource_types.places.fields.name.type_name);

	return this.rebuild_database_schema();
}	

DatastoreMysql.create_database_if_not_exist = function(db_name){
	return new Promise(function(resolve, reject){
		var sql_query = 'CREATE DATABASE IF NOT EXISTS ??';
		mysql_client.query(sql_query, [db_name], function(err, rows, fields) {
			if (err) {
				reject(err);
				return;
			}
			console.log("Jestem po stworzeniu bazy danych: ", db_name);
			resolve(db_name);
		})
	})
}

DatastoreMysql.use_db = function(db_name){
	return new Promise(function(resolve, reject){
		mysql_client.query('USE ??',[db_name], function(err, rows) {
			if (err) {
				reject(err);
				return;
			}
			console.log("Jestem po uzyciu bazy danych: ", db_name);
			resolve();			
		});
	})	
}

DatastoreMysql.get_resource_type_create_query = function(resource_type){
	var table_name = resource_type.name;
	var query = "CREATE TABLE IF NOT EXISTS " + table_name + "(";
		for (var i in resource_type.fields) {
			query += resource_type.fields[i].name + " ";
			if (resource_type.fields[i].type_name == "int") {
				query += "INT,"			
			} else if (resource_type.fields[i].type_name == "float") {
				query += "FLOAT,"			
			} else {
				query += "VARCHAR(255),"			
			}
		//remove last comma 
		query = query.substring(0, query.length-1) + ");";
}
return query;
}

DatastoreMysql.execute_query = function(query_string){
	return new Promise(function(resolve, reject){
		mysql_client.query(query_string, function(err, rows, fields){
			if (err) {
				reject(err);
				return;
			}
			console.log("Jestem po wykonaniu kwerendy ",query_string);
			resolve();
		});
	})
}

DatastoreMysql.create_necessary_tables = function(db_name){
	var self = this;
	var resource_types = Sealious.ChipManager.get_chips_by_type("resource_type");

	var create_queries = resource_types
	.map(this.get_resource_type_create_query)
	.map(function(query){
		return self.execute_query(query);
	})

	return Promise.all(create_queries);
}

DatastoreMysql.get_table_schema = function(db_name, table_name){
	return new Promise(function(resolve, reject){
		mysql_client.query("Select column_name, column_type from information_schema.columns where table_schema = '" + db_name + "' AND table_name='" + table_name + "'", function(err, rows, fields) {
			resolve(rows);
		})		
	})
}

DatastoreMysql.add_column_to_table = function(db_name, table_name, column_name, column_type){
	var query = "ALTER TABLE " + table_name + " ADD COLUMN " + column_name + " " + column_type;
	return this.execute_query(query);
}

DatastoreMysql.change_column_type = function(db_name, table_name, column_name, new_column_type){
	var query = "ALTER TABLE " + table_name + " MODIFY COLUMN " + column_name + " " + new_column_type;
	return this.execute_query(query);
}

DatastoreMysql.fix_table_for_resource_type = function(db_name, resource_type){
	var self = this;
	return self.get_table_schema(db_name, resource_type.name)
	.then(function(schema){

		var all_promises = [];

		var column_names = schema.map(function(value){ 
			return value.column_name; 
		});

		for (var i in resource_type.fields) {
			var field = resource_type.fields[i];
			if (column_names.indexOf(field.name) == -1){
				var column_name = field.name;
				var column_type;
				if (field.type_name == "int"){
					column_type = "INT";					
				} else if(field.type_name == "float") {
					column_type = "FLOAT";					
				} else {
					column_type = "VARCHAR(255)"					
				}
				var promise = self.add_column_to_table(db_name, resource_type.name, column_name, column_type);
				all_promises.push(promise);
			} else {
				var column_type = schema
				.filter(function(value){ return (value.table_name == resource_type.name &&  value.column_name == resource_type_field.name)})
				.map(function(value){ return value.column_type; })[0];

				var type_map = {
					"int(11)": "int",
					"float": "float",
					"varchar(255)": "text"
				}

				if(type_map[column_type]!=field.type_name){
					var column_type;
					if (field.type_name == "int") {
						column_type = "INT";
					} else if(field.type_name == "float") {
						column_type = "FLOAT";
					}else{
						column_type = "VARCHAR(255)";
					}
					var promise = self.change_column_type(db_name, resource_type.name, field.name, column_type);;
					all_promises.push(promise);
				} 
			}
		}

		return Promise.all(all_promises);

	});
}


DatastoreMysql.rebuild_database_schema = function(){
	var self = this;
	var db_name = "my_db";
	return self.create_database_if_not_exist(db_name)
	.then(function(){
		return self.use_db(db_name);
	})
	.then(function(){
		return self.create_necessary_tables(db_name);
	})
	.then(function(){
		var resource_types = Sealious.ChipManager.get_chips_by_type("resource_type");

		var fix_table_promises = [];

		for(var i in resource_types){
			var resource_type = resource_types[i];
			var promise = self.fix_table_for_resource_type(db_name, resource_type);
			fix_table_promises.push(promise);
		}

		return Promise.all(fix_table_promises);
	}).then(function(){
		mysql_client.end();
		console.log("już po wszystkim!!");
		return Promise.resolve();
	})
};

	/*	TO-DO
		sprawdzić czy istnieje tabela
			jesli tak, to sprawdź czy jest kolumna (show fields from places)
				jesli tak, to sprawdź jej typ
					jesli jest inny, to: (alter table_name modify column_name)
					 (tu musi być catch)
				jesli nie, to ją dodaj
			jesli nie, to utwórz: CREATE TABLE IF NOT EXISTS 
			*/


	//mysql_client.end();



//DatastoreMysql = DbsCommonPart(DatastoreMysql,private);		

module.exports = DatastoreMysql;