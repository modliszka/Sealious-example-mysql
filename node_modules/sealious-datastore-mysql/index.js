var Promise = require("bluebird");
var Sealious = require("sealious");
var Mysql = require("mysql");
var data = require("./auth.js");
//var DbsCommonPart = require('sealious-datastore-dbs-common-part');

var DatastoreMysql  = new Sealious.ChipTypes.Datastore("mysql");

Sealious.ConfigManager.set_default_config(
	"datastore_chip_name", 
	data
);

DatastoreMysql.start = function(){
	var config = Sealious.ConfigManager.get_config("datastore_chip_name");

	var mysql_client = Mysql.createConnection(config);
	mysql_client.connect();
	var resource_types = Sealious.ChipManager.get_chips_by_type("resource_type");
	//console.log(resource_types.places.fields.name.type_name);

	return Promise.resolve()
		.then(function(){
			return new Promise(function(resolve, reject){
				var db_name = "my_db";
				var sql_query = 'CREATE DATABASE IF NOT EXISTS ??';
				mysql_client.query(sql_query, [db_name], function(err, rows, fields) {
					if (err) {
						reject(err);
						return;
					}
					console.log("Jestem po stworzeniu bazy danych: ", db_name);
					resolve(db_name);
				})
			})
		})
		.then(function(db_name){
			return new Promise(function(resolve, reject){
				mysql_client.query('USE ??',[db_name], function(err, rows) {
					if (err) {
						reject(err);
						return;
					}
					console.log("Jestem po uzyciu bazy danych: ", db_name);
					resolve();			
				});
			})
		})
		.then(function(){
			return new Promise(function(resolve, reject){
				for (var i in resource_types) {
					var rt = resource_types[i];
					console.log("mamy typ ", rt.name);
					var table_name = rt.name;
					var query = "("
					for (var irt in rt.fields) {
						//console.log(rt.fields[irt].name," ", rt.fields[irt].type_name );
						query = query + (rt.fields[irt].name + " ");
						if (rt.fields[irt].type_name == "int") 
							query = query + "INT,"
						else if(rt.fields[irt].type_name == "float") 
							query = query + "FLOAT,"
						else 
							query = query + "VARCHAR(255),"
					}
					query = query.substring(0, query.length-1) + ")";
					//console.log(query);
					new Promise((function(table_name, query){
						return function(resolve, reject){
							mysql_client.query('CREATE TABLE IF NOT EXISTS ' +table_name +" "+query+';', function(err, rows, fields){
								if (err) {
									reject(err);
									return;
								}
								console.log("Jestem po dodaniu tabeli ",table_name);
								resolve();
							});
						};
					})(table_name, query));

				}
				console.log("Jestem po pętli for");
				resolve();
			})
		})
		.then(function(){
			return new Promise(function(resolve, reject){
				mysql_client.query('show fields from places', function(err, rows, fields) {
					if (err) {
						reject(err);
						return;
					}
					console.log('\n\n\nRows ', rows[0].Field);// nazwa kolumny
					resolve();

					/*[ { Field: 'name',
						Type: 'varchar(255)',
						Null: 'YES',
						Key: '',
						Default: null,
						Extra: '' },
					*/
				})
			})
			.then(function(){
				return mysql_client.query("SELECT TABLE_NAME from information_schema.TABLES WHERE TABLE_SCHEMA = 'my_db' AND TABLE_NAME = 'places';" , function(err, rows, fields){
					if (err) {
						reject(err);
						return;
					}
					console.log("R: ", rows[0]);
				});
			})
		});

	/*	TO-DO
		sprawdzić czy istnieje tabela
			jesli tak, to sprawdź czy jest kolumna (show fields from places)
				jesli tak, to sprawdź jej typ
					jesli jest inny, to: (alter table_name modify column_name)
					 (tu musi być catch)
				jesli nie, to ją dodaj
			jesli nie, to utwórz: CREATE TABLE IF NOT EXISTS 
	*/


	//mysql_client.end();
}


//DatastoreMysql = DbsCommonPart(DatastoreMysql,private);		

module.exports = DatastoreMysql;